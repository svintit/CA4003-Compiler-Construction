/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyParser.jj */
/*@egen*//*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options{
  JAVA_UNICODE_ESCAPE = true;
  IGNORE_CASE = true;
                 
               
                           
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(MyParser)

  import java.util.*;

  public class MyParser/*@bgen(jjtree)*/implements MyParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMyParserState jjtree = new JJTMyParserState();

/*@egen*/
    public static STC ST = new STC();
    public static String scope = "global";

    public static Hashtable ht = new Hashtable();

    public static void main(String args[]) {
      MyParser tokeniser;

      if (args.length == 0) {
        System.out.println("Reading from standard input...");
        tokeniser = new MyParser(System.in);
      }
      else if (args.length == 1) {
        try {
          tokeniser = new MyParser(new java.io.FileInputStream(args[0]));
        }
        catch (java.io.FileNotFoundException e) {
          System.err.printf("File %s not found.\n", args[0]);
          return;
        }
      }
      else {
        System.out.println("MyParser: Usage is one of:");
        System.out.println("      java MyParser < inputfile");
        System.out.println("OR");
        System.out.println("      java MyParser inputfile");
        return;
      }
      try {
        SimpleNode root = tokeniser.Program();
        System.out.println("\n                ************************\n                * Abstract Syntax Tree *\n                ************************\n");
        root.dump("");

        System.out.print("\n                   ****************\n                   * Symbol Table *\n                   ****************\n\n");
        ST.print();
        
        TypeCheckVisitor tcv = new TypeCheckVisitor();
        System.out.println("\n                *********************\n                * Semantic Analysis *\n                *********************\n");
        root.jjtAccept(tcv, ht);

        ThreeAddressCode taci = new ThreeAddressCode();
        System.out.println("\n               **********************\n               * Three Address Code *\n               **********************");
        System.out.println("  -> Also Outputted to file: ThreeAddressCode.ir <-\n");
        root.jjtAccept(taci, null);
		  }
  		catch (ParseException e) {
        System.out.println("Encountered errors during parsing.");
        e.printStackTrace();
  			//System.out.println(e.getMessage());
  		}
    }
  }

PARSER_END(MyParser)

/****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
****************************************/

/* DECLARE NESTING VAR */
TOKEN_MGR_DECLS : {
    static int commentNesting = 0;
}

/* SKIP WHITESPACE AND COMMENTS */
SKIP : {
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | "/*" { commentNesting++; } : IN_COMMENT
  | < "//" (~["\r", "\n"])* >
}

<IN_COMMENT> SKIP : {
    "/*" { commentNesting++; }
  | "*/" { commentNesting--;
           if (commentNesting == 0)
              SwitchTo(DEFAULT);
         }
  | <~[]>
}

/* RESERVED WORDS */
TOKEN : {
    < VARIABLE: "variable" >
  | < CONSTANT: "constant" >
  | < RETURN: "return" >
  | < INTEGER: "integer" >
  | < BOOLEAN: "boolean" >
  | < VOID: "void" >
  | < MAIN: "main" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < WHILE: "while" >
  | < BEGIN: "begin" >
  | < END: "end" >
  | < IS: "is" >
  | < SKIPPY: "skip" >
}

/* OPERATORS */
TOKEN : {
    < COMMA: "," >
  | < SEMICOL: ";" >
  | < COLON: ":" >
  | < ASSIGN: ":=" >
  | < L_BRACK: "(" >
  | < R_BRACK: ")" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < BITNOT: "~" >
  | < BITOR: "|" >
  | < BITAND: "&" >
  | < EQUAL: "=" >
  | < N_EQUAL: "!=" >
  | < L_THAN: "<" >
  | < L_OR_EQU: "<=" >
  | < G_THAN: ">" >
  | < G_OR_EQU: ">=" >
}

/* REGULAR EXPRESSIONS */
TOKEN : {
    < #DIGIT: ["0"-"9"] >
  | < #CHAR: ["a"-"z", "A"-"Z"] >
  | < NUM: ((<MINUS>)? ["1"-"9"] (<DIGIT>)*) | ((<MINUS>)? ["0"]) >
  | < ID: (<CHAR>) ((<DIGIT>) | (<CHAR>) | "_")* >
}

/* ANY OTHER EXPRESSION THAT EXISTS */
TOKEN : {
    < OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode Program()          : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Program */
    try {
/*@egen*/
    DeclList() FunctionList() Main() <EOF>/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ {
      return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DeclList() : {} {
    (Decl())*
}

void Decl() : {} {
    (VarDecl() | ConstDecl()) <SEMICOL>
}

void VarDecl()                      : {/*@bgen(jjtree) VariableDeclaration */
                                       ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;} {/*@bgen(jjtree) VariableDeclaration */
    try {
/*@egen*/
    t = <VARIABLE> id = Identifier() <COLON> type = Type()/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ {
      jjtn000.value = t.image;
      ST.put(id, type, "variable", scope);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConstDecl()                      : {/*@bgen(jjtree) ConstantDeclaration */
                                         ASTConstantDeclaration jjtn000 = new ASTConstantDeclaration(JJTCONSTANTDECLARATION);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;} {/*@bgen(jjtree) ConstantDeclaration */
    try {
/*@egen*/
    t = <CONSTANT> id = Identifier() <COLON> type = Type() ConstantAssign()/*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                            }
/*@egen*/ {
      ST.put(id, type, "constant", scope);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void ConstantAssign() : {Token t;} {
    t = <ASSIGN> Expression()/*@bgen(jjtree) #ConstantAssign( 1) */
                              {
                                ASTConstantAssign jjtn001 = new ASTConstantAssign(JJTCONSTANTASSIGN);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                              }
/*@egen*/ {
      jjtn001.value = t.image;
    }/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                }
                              }
/*@egen*/                   
}

void FunctionList() : {} {
    (Function())*
}

void Function()           : {/*@bgen(jjtree) Function */
                             ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;} {/*@bgen(jjtree) Function */
    try {
/*@egen*/
    type = Type() id = Identifier() {
      jjtn000.value = id;
      scope = id;
      ST.put(id, type, "function", scope);
    }
    <L_BRACK> ParameterList() <R_BRACK> 
    <IS> DeclList()
    <BEGIN>
    StatementBlock()
    <RETURN> <L_BRACK> (Expression() | {}) <R_BRACK>/*@bgen(jjtree) #FunctionReturn( 1) */
                                                     {
                                                       ASTFunctionReturn jjtn001 = new ASTFunctionReturn(JJTFUNCTIONRETURN);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
                                                     }
                                                     try {
/*@egen*/ <SEMICOL>/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001,  1);
                                                       }
                                                     }
/*@egen*/                   
    <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Type()       : {/*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Type */
  try {
/*@egen*/
  (t = <INTEGER> | t = <BOOLEAN> | t = <VOID>)/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/ {
    jjtn000.value = t.image;
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 

void ParameterList() : {} {
    (NempParameterList() NempParameterListPrime())
  | {}
}

void NempParameterList()                : {/*@bgen(jjtree) ParameterList */
                                           ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;} {/*@bgen(jjtree) ParameterList */
    try {
/*@egen*/
    id = Identifier() <COLON> type = Type()/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ {
      ST.put(id, type, "parameter", scope);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NempParameterListPrime() : {} {
    (<COMMA> NempParameterList())
  | {}
}

void Main()       : {/*@bgen(jjtree) Main */
                     ASTMain jjtn000 = new ASTMain(JJTMAIN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Main */
    try {
/*@egen*/
    {scope = "main";}
    t = <MAIN>
    <BEGIN>
    DeclList()
    StatementBlock()
    <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StatementBlock() : {} {
    (Statement())*
}

void Statement()            : {/*@bgen(jjtree) Statement */
                               ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    Identifier() ((t = <ASSIGN> Expression() <SEMICOL>/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ {
      jjtn000.value = t.image;
    })
  | (t = <L_BRACK> ArgList() <R_BRACK> <SEMICOL>)/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ {
      jjtn000.value = "Process_Call";
    })
  | (t = <BEGIN> StatementBlock() <END>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ {
      jjtn000.value = t.image;
    })
  | (t = <IF> Condition() <BEGIN> StatementBlock() <END> <ELSE> <BEGIN> StatementBlock() <END>/*@bgen(jjtree)*/
                                                                                               {
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
                                                                                               }
/*@egen*/ {
      jjtn000.value = t.image;
    })
  | (t = <WHILE> Condition() <BEGIN> StatementBlock() <END>/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/ {
      jjtn000.value = t.image;
    })
  | (<SKIPPY> <SEMICOL>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression() : {} {
  (Fragment() BinaryArithOp())
| (<L_BRACK> Expression() <R_BRACK> BinaryArithOp())
}

void BinaryArithOp() : {Token t;} {/*@bgen(jjtree) #PlusOperator( 2) */
    {
      ASTPlusOperator jjtn001 = new ASTPlusOperator(JJTPLUSOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (t = <PLUS> Expression()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtc001 = false;
                             }
/*@egen*/ {
      jjtn001.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/                 
  |/*@bgen(jjtree) #MinusOperator( 2) */
    {
      ASTMinusOperator jjtn002 = new ASTMinusOperator(JJTMINUSOPERATOR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (t = <MINUS> Expression()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn002,  2);
                                jjtc002 = false;
                              }
/*@egen*/ {
      jjtn002.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
    }
/*@egen*/                  
  | {}
}

void Fragment() : {} {
    (<MINUS>)? (Identifier() (<L_BRACK> ArgList() <R_BRACK> | {}))
  | Number()
  | Boolean()
}

void Condition() : {} {
    (<BITNOT> Condition() ConditionPrime())
  | LOOKAHEAD(3) (<L_BRACK> Condition() <R_BRACK> ConditionPrime())
  | (Expression() CompOp() ConditionPrime())
}

void ConditionPrime() : {Token t;} {/*@bgen(jjtree) #BitOrOperator( 2) */
    {
      ASTBitOrOperator jjtn001 = new ASTBitOrOperator(JJTBITOROPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (t = <BITOR> Condition() ConditionPrime()/*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn001,  2);
                                                jjtc001 = false;
                                              }
/*@egen*/ {
      jjtn001.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/                  
  |/*@bgen(jjtree) #BitAndOperator( 2) */
    {
      ASTBitAndOperator jjtn002 = new ASTBitAndOperator(JJTBITANDOPERATOR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (t = <BITAND> Condition() ConditionPrime()/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                                 jjtc002 = false;
                                               }
/*@egen*/ {
      jjtn002.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
    }
/*@egen*/                   
  | {}
}

void CompOp() : {Token t;} {/*@bgen(jjtree) #EqualOperator( 2) */
    {
      ASTEqualOperator jjtn001 = new ASTEqualOperator(JJTEQUALOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (t = <EQUAL> Expression()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
                              }
/*@egen*/ {
      jjtn001.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/                  
  |/*@bgen(jjtree) #NotEqualOperator( 2) */
    {
      ASTNotEqualOperator jjtn002 = new ASTNotEqualOperator(JJTNOTEQUALOPERATOR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (t = <N_EQUAL> Expression()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                  jjtc002 = false;
                                }
/*@egen*/ {
      jjtn002.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
    }
/*@egen*/                     
  |/*@bgen(jjtree) #LessThanOperator( 2) */
    {
      ASTLessThanOperator jjtn003 = new ASTLessThanOperator(JJTLESSTHANOPERATOR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ (t = <L_THAN> Expression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn003,  2);
                                 jjtc003 = false;
                               }
/*@egen*/ {
      jjtn003.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  2);
      }
    }
/*@egen*/                     
  |/*@bgen(jjtree) #LessOrEqualOperator( 2) */
    {
      ASTLessOrEqualOperator jjtn004 = new ASTLessOrEqualOperator(JJTLESSOREQUALOPERATOR);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/ (t = <L_OR_EQU> Expression()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn004,  2);
                                   jjtc004 = false;
                                 }
/*@egen*/ {
      jjtn004.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        throw (RuntimeException)jjte004;
      }
      if (jjte004 instanceof ParseException) {
        throw (ParseException)jjte004;
      }
      throw (Error)jjte004;
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004,  2);
      }
    }
/*@egen*/                        
  |/*@bgen(jjtree) #GreaterThanOperator( 2) */
    {
      ASTGreaterThanOperator jjtn005 = new ASTGreaterThanOperator(JJTGREATERTHANOPERATOR);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
    }
    try {
/*@egen*/ (t = <G_THAN> Expression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn005,  2);
                                 jjtc005 = false;
                               }
/*@egen*/ {
      jjtn005.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte005) {
      if (jjtc005) {
        jjtree.clearNodeScope(jjtn005);
        jjtc005 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte005 instanceof RuntimeException) {
        throw (RuntimeException)jjte005;
      }
      if (jjte005 instanceof ParseException) {
        throw (ParseException)jjte005;
      }
      throw (Error)jjte005;
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005,  2);
      }
    }
/*@egen*/                        
  |/*@bgen(jjtree) #GreaterOrEqualOperator( 2) */
    {
      ASTGreaterOrEqualOperator jjtn006 = new ASTGreaterOrEqualOperator(JJTGREATEROREQUALOPERATOR);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
    }
    try {
/*@egen*/ (t = <G_OR_EQU> Expression()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn006,  2);
                                   jjtc006 = false;
                                 }
/*@egen*/ {
      jjtn006.value = t.image;
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte006) {
      if (jjtc006) {
        jjtree.clearNodeScope(jjtn006);
        jjtc006 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte006 instanceof RuntimeException) {
        throw (RuntimeException)jjte006;
      }
      if (jjte006 instanceof ParseException) {
        throw (ParseException)jjte006;
      }
      throw (Error)jjte006;
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006,  2);
      }
    }
/*@egen*/                           
}

void ArgList() : {} {
    NempArgList()
  | {}
}

void NempArgList()              : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    (Identifier() ((<COMMA> NempArgList()) |/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/ {}))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
} 

String Identifier()             : {/*@bgen(jjtree) Identifier */
                                   ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    (t = <ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
      jjtn000.value = t.image;
      return t.image;
    })/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
} 

void Boolean()          : {/*@bgen(jjtree) Boolean */
                           ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Boolean */
  try {
/*@egen*/
  ((t = <TRUE> | t = <FALSE>)/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
    jjtn000.value = t.image;
  })/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Number()         : {/*@bgen(jjtree) Number */
                         ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Number */
    try {
/*@egen*/
    (t = <NUM>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
      jjtn000.value = t.image;
    })/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}