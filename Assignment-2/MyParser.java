/* Generated By:JJTree&JavaCC: Do not edit this line. MyParser.java */
  import java.util.*;

  public class MyParser/*@bgen(jjtree)*/implements MyParserTreeConstants, MyParserConstants {/*@bgen(jjtree)*/
  protected static JJTMyParserState jjtree = new JJTMyParserState();public static STC ST = new STC();
    public static String scope = "global";

    public static Hashtable ht = new Hashtable();

    public static void main(String args[]) {
      MyParser tokeniser;

      if (args.length == 0) {
        System.out.println("Reading from standard input...");
        tokeniser = new MyParser(System.in);
      }
      else if (args.length == 1) {
        try {
          tokeniser = new MyParser(new java.io.FileInputStream(args[0]));
        }
        catch (java.io.FileNotFoundException e) {
          System.err.printf("File %s not found.\u005cn", args[0]);
          return;
        }
      }
      else {
        System.out.println("MyParser: Usage is one of:");
        System.out.println("      java MyParser < inputfile");
        System.out.println("OR");
        System.out.println("      java MyParser inputfile");
        return;
      }
      try {
        SimpleNode root = tokeniser.Program();
        System.out.println("\u005cn                ************************\u005cn                * Abstract Syntax Tree *\u005cn                ************************\u005cn");
        root.dump("");

        System.out.print("\u005cn                   ****************\u005cn                   * Symbol Table *\u005cn                   ****************\u005cn\u005cn");
        ST.print();

        TypeCheckVisitor tcv = new TypeCheckVisitor();
        System.out.println("\u005cn                *********************\u005cn                * Semantic Analysis *\u005cn                *********************\u005cn");
        root.jjtAccept(tcv, ht);

        ThreeAddressCode taci = new ThreeAddressCode();
        System.out.println("\u005cn               **********************\u005cn               * Three Address Code *\u005cn               **********************");
        System.out.println("  -> Also Outputted to file: ThreeAddressCode.ir <-\u005cn");
        root.jjtAccept(taci, null);
                  }
                catch (ParseException e) {
        System.out.println("Encountered errors during parsing.");
        e.printStackTrace();
                        //System.out.println(e.getMessage());
                }
    }

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/
  static final public SimpleNode Program() throws ParseException {
                                 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeclList();
      FunctionList();
      Main();
      jj_consume_token(0);
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DeclList() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Decl();
    }
  }

  static final public void Decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      VarDecl();
      break;
    case CONSTANT:
      ConstDecl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOL);
  }

  static final public void VarDecl() throws ParseException {
                                       /*@bgen(jjtree) VariableDeclaration */
                                       ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(VARIABLE);
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
      jjtn000.value = t.image;
      ST.put(id, type, "variable", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ConstDecl() throws ParseException {
                                         /*@bgen(jjtree) ConstantDeclaration */
                                         ASTConstantDeclaration jjtn000 = new ASTConstantDeclaration(JJTCONSTANTDECLARATION);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(CONSTANT);
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
      ConstantAssign();
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
      ST.put(id, type, "constant", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ConstantAssign() throws ParseException {
                         Token t;
    t = jj_consume_token(ASSIGN);
    Expression();
                                ASTConstantAssign jjtn001 = new ASTConstantAssign(JJTCONSTANTASSIGN);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
    try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
      jjtn001.value = t.image;
    } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                }
    }
  }

  static final public void FunctionList() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Function();
    }
  }

  static final public void Function() throws ParseException {
                             /*@bgen(jjtree) Function */
                             ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t; String type; String id;
    try {
      type = Type();
      id = Identifier();
      jjtn000.value = id;
      scope = id;
      ST.put(id, type, "function", scope);
      jj_consume_token(L_BRACK);
      ParameterList();
      jj_consume_token(R_BRACK);
      jj_consume_token(IS);
      DeclList();
      jj_consume_token(BEGIN);
      StatementBlock();
      jj_consume_token(RETURN);
      jj_consume_token(L_BRACK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case L_BRACK:
      case MINUS:
      case NUM:
      case ID:
        Expression();
        break;
      default:
        jj_la1[3] = jj_gen;

      }
      jj_consume_token(R_BRACK);
                                                       ASTFunctionReturn jjtn001 = new ASTFunctionReturn(JJTFUNCTIONRETURN);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(SEMICOL);
      } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001,  1);
                                                       }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String Type() throws ParseException {
                       /*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
        break;
      case VOID:
        t = jj_consume_token(VOID);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
    jjtn000.value = t.image;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ParameterList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      NempParameterList();
      NempParameterListPrime();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final public void NempParameterList() throws ParseException {
                                           /*@bgen(jjtree) ParameterList */
                                           ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);String id; String type;
    try {
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
      ST.put(id, type, "parameter", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NempParameterListPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NempParameterList();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final public void Main() throws ParseException {
                     /*@bgen(jjtree) Main */
                     ASTMain jjtn000 = new ASTMain(JJTMAIN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
     scope = "main";
      t = jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      DeclList();
      StatementBlock();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void StatementBlock() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BEGIN:
      case SKIPPY:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      Statement();
    }
  }

  static final public void Statement() throws ParseException {
                               /*@bgen(jjtree) Statement */
                               ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          t = jj_consume_token(ASSIGN);
          Expression();
          jj_consume_token(SEMICOL);
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
      jjtn000.value = t.image;
          break;
        case L_BRACK:
          t = jj_consume_token(L_BRACK);
          ArgList();
          jj_consume_token(R_BRACK);
          jj_consume_token(SEMICOL);
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
      jjtn000.value = "Process_Call";
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case BEGIN:
        t = jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
      jjtn000.value = t.image;
        break;
      case IF:
        t = jj_consume_token(IF);
        Condition();
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
        jj_consume_token(ELSE);
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
      jjtn000.value = t.image;
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
        Condition();
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
      jjtn000.value = t.image;
        break;
      case SKIPPY:
        jj_consume_token(SKIPPY);
        jj_consume_token(SEMICOL);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS:
    case NUM:
    case ID:
      Fragment();
      BinaryArithOp();
      break;
    case L_BRACK:
      jj_consume_token(L_BRACK);
      Expression();
      jj_consume_token(R_BRACK);
      BinaryArithOp();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryArithOp() throws ParseException {
                        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      ASTPlusOperator jjtn001 = new ASTPlusOperator(JJTPLUSOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(PLUS);
        Expression();
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtc001 = false;
      jjtn001.value = t.image;
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case MINUS:
      ASTMinusOperator jjtn002 = new ASTMinusOperator(JJTMINUSOPERATOR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        t = jj_consume_token(MINUS);
        Expression();
                                jjtree.closeNodeScope(jjtn002,  2);
                                jjtc002 = false;
      jjtn002.value = t.image;
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
      }
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  static final public void Fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_BRACK:
        jj_consume_token(L_BRACK);
        ArgList();
        jj_consume_token(R_BRACK);
        break;
      default:
        jj_la1[13] = jj_gen;

      }
      break;
    case NUM:
      Number();
      break;
    case TRUE:
    case FALSE:
      Boolean();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITNOT:
      jj_consume_token(BITNOT);
      Condition();
      ConditionPrime();
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(L_BRACK);
        Condition();
        jj_consume_token(R_BRACK);
        ConditionPrime();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case L_BRACK:
        case MINUS:
        case NUM:
        case ID:
          Expression();
          CompOp();
          ConditionPrime();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void ConditionPrime() throws ParseException {
                         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITOR:
      ASTBitOrOperator jjtn001 = new ASTBitOrOperator(JJTBITOROPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(BITOR);
        Condition();
        ConditionPrime();
                                                jjtree.closeNodeScope(jjtn001,  2);
                                                jjtc001 = false;
      jjtn001.value = t.image;
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case BITAND:
      ASTBitAndOperator jjtn002 = new ASTBitAndOperator(JJTBITANDOPERATOR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        t = jj_consume_token(BITAND);
        Condition();
        ConditionPrime();
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                                 jjtc002 = false;
      jjtn002.value = t.image;
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
      }
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static final public void CompOp() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      ASTEqualOperator jjtn001 = new ASTEqualOperator(JJTEQUALOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(EQUAL);
        Expression();
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
      jjtn001.value = t.image;
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case N_EQUAL:
      ASTNotEqualOperator jjtn002 = new ASTNotEqualOperator(JJTNOTEQUALOPERATOR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        t = jj_consume_token(N_EQUAL);
        Expression();
                                  jjtree.closeNodeScope(jjtn002,  2);
                                  jjtc002 = false;
      jjtn002.value = t.image;
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
      }
      break;
    case L_THAN:
      ASTLessThanOperator jjtn003 = new ASTLessThanOperator(JJTLESSTHANOPERATOR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        t = jj_consume_token(L_THAN);
        Expression();
                                 jjtree.closeNodeScope(jjtn003,  2);
                                 jjtc003 = false;
      jjtn003.value = t.image;
      } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  2);
      }
      }
      break;
    case L_OR_EQU:
      ASTLessOrEqualOperator jjtn004 = new ASTLessOrEqualOperator(JJTLESSOREQUALOPERATOR);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      try {
        t = jj_consume_token(L_OR_EQU);
        Expression();
                                   jjtree.closeNodeScope(jjtn004,  2);
                                   jjtc004 = false;
      jjtn004.value = t.image;
      } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
      } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004,  2);
      }
      }
      break;
    case G_THAN:
      ASTGreaterThanOperator jjtn005 = new ASTGreaterThanOperator(JJTGREATERTHANOPERATOR);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      try {
        t = jj_consume_token(G_THAN);
        Expression();
                                 jjtree.closeNodeScope(jjtn005,  2);
                                 jjtc005 = false;
      jjtn005.value = t.image;
      } catch (Throwable jjte005) {
      if (jjtc005) {
        jjtree.clearNodeScope(jjtn005);
        jjtc005 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte005 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte005;}
      }
      if (jjte005 instanceof ParseException) {
        {if (true) throw (ParseException)jjte005;}
      }
      {if (true) throw (Error)jjte005;}
      } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005,  2);
      }
      }
      break;
    case G_OR_EQU:
      ASTGreaterOrEqualOperator jjtn006 = new ASTGreaterOrEqualOperator(JJTGREATEROREQUALOPERATOR);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
      try {
        t = jj_consume_token(G_OR_EQU);
        Expression();
                                   jjtree.closeNodeScope(jjtn006,  2);
                                   jjtc006 = false;
      jjtn006.value = t.image;
      } catch (Throwable jjte006) {
      if (jjtc006) {
        jjtree.clearNodeScope(jjtn006);
        jjtc006 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte006 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte006;}
      }
      if (jjte006 instanceof ParseException) {
        {if (true) throw (ParseException)jjte006;}
      }
      {if (true) throw (Error)jjte006;}
      } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006,  2);
      }
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArgList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      NempArgList();
      break;
    default:
      jj_la1[19] = jj_gen;

    }
  }

  static final public void NempArgList() throws ParseException {
                                   /*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        NempArgList();
        break;
      default:
        jj_la1[20] = jj_gen;
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;

      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String Identifier() throws ParseException {
                                   /*@bgen(jjtree) Identifier */
                                   ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
      jjtn000.value = t.image;
      {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Boolean() throws ParseException {
                           /*@bgen(jjtree) Boolean */
                           ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
    jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Number() throws ParseException {
                         /*@bgen(jjtree) Number */
                         ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(G_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(L_OR_EQU)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(L_BRACK)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(L_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(L_BRACK)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(N_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(L_BRACK)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(BITNOT)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(G_OR_EQU)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x1800,0x1c000,0x80300000,0x1c000,0x0,0x8000000,0x4c40000,0xc0000000,0x4c40000,0x80300000,0x0,0x0,0x80000000,0x300000,0x0,0x80300000,0x0,0x0,0x0,0x8000000,0x300000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xc004,0x0,0x8000,0x0,0x8000,0x0,0x8000,0xc004,0x6,0x4,0x0,0xc004,0x8,0xc004,0x30,0xfc0,0x8000,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
